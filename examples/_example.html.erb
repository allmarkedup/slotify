<%# locals: (id:) -%>
<%# slots: (title: "Example title", subtitle: nil, website_link: nil, lists: nil, quotes: nil, date: Time.zone.now) -%>

<%= tag.section id: do %>
  <h2 class="example-title">
    <%= title %>
  </h2> 

  <p>Date: <%= date.to_fs(:short) %></p>

  <%#
    Slot content can be passed directly to helpers such as `content_tag`.
    Arguments, options and any block content provided when calling the
    `.with_<slot_name>` method will be merged with those set when rendering
    the slot content in the partial, a below. 
  %>
  <%= content_tag :h3, subtitle, class: "example-subtitleasd" if subtitle.present? %>
  
  <%#
    Link slot content (and options) rendered via the link_to helper.
  %>
  <p>Example link: <%= link_to website_link, data: {controller: "external-link"} %></p>

  <%#
    Renders the `_list.html.erb` partial once for each of the `list` slot values.
    The slot block content is passed through so that the list item slots can be
    set by the top-level caller.
  %>
  <%= render lists %>

  <%#
    The target partial path can be overriden if required
  %>
  <%= render lists.with_partial_path("ordered_list") %>

  <hr>

  <% if quotes.any? %>
    <h3>Quotes</h3>
    <%#
      Slots intended to be called multiple times are declared with
      and referenced with plural variable names.
      Arbitrary slot keyword args can be provided by the caller
      and accessed via the `SLOT_NAME.options` hash in the partial.
    %>
    <% quotes.each do |quote| %>
      <blockquote <%= quote.options.except(:citation) %>>
        <%= quote %>
        <%== "&mdash; #{tag.cite(quote.options.citation)}" if quote.options.citation.present? %>
      </blockquote>
    <% end %>
  <% end %>

  <%#
    Yield any other non-slot content from the calling block.
  %>
  <div class="example-description">
    <%= partial.yield %>
  </div>
<% end %> 